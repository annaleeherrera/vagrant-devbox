---
  -
    hosts: all
    become: yes
    become_user: root
    become_method: sudo

    vars:
      ruby_version: "2.3"
      postgresql_version: "9.4"
      postgis_version: "2.3"
      hostname: "dev"
      localuser: "ubuntu"
      localgroup: "users"
      localshell: "/bin/bash"

    handlers:
      - name: sync time
        command: /etc/cron.hourly/ntpdate

      - name: restart postgresql
        service: name=postgresql state=restarted

      - name: reload systemd
        command: systemctl daemon-reload

      - name: restart openvpn
        service: name=openvpn state=restarted enabled=yes

    tasks:
      - name: Remove unused packages
        apt: pkg={{item}} state=absent
        with_items:
          - puppet
          - chef

      - name: Update hostname
        hostname: name={{hostname}}

      - name: Create local user and group
        user: name={{localuser}} group={{localgroup}} groups="users,sudo" shell={{localshell}} state="present"

      - name: Copy bash profile
        copy: src=./files/bash_profile dest=/home/{{localuser}}/.bash_profile force=no mode=0644 owner={{localuser}} group={{localgroup}}

      - name: Update apt-cache if it is staler than 60 minutes
        apt: update_cache=yes cache_valid_time=3600

      - name: Add cron job to sync time
        copy: src=./files/ntpdate dest=/etc/cron.hourly/ntpdate mode=0755 owner=root group=root
        notify: sync time
        
      - name: Install Aptitude
        apt: pkg=aptitude state=installed

      - name: Update stale packages
        apt: upgrade=yes

      - name: Install base packages
        apt: pkg={{item}} state=installed
        with_items:
          - ntp
          - build-essential
          - git-core
          - vim
          - vim-nox
          - direnv
          - tmux
          - tmate
          - redis-server
          - redis-tools
          - memcached
          - phantomjs
          - zip
          - unzip
          - htop
          - openvpn
          - ack-grep
          - libcurl4-openssl-dev
          - imagemagick
          - libsqlite3-dev

      - name: Make Vim the system editor
        alternatives: name=editor path=/usr/bin/vim link=/usr/bin/editor

      - name: Add Nodesource repository key
        apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present

      - name: Add Nodesource apt source
        apt_repository: repo="deb https://deb.nodesource.com/node_0.10 {{ansible_lsb.codename}} main" state=present update_cache=yes

      - name: Install Node
        apt: pkg={{item}} state=latest
        with_items:
          - nodejs
          - autoconf
          - libtool

      - name: Add Postgres repository
        apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ansible_lsb.codename}}-pgdg main' state=present

      - name: Add Postgres repository key
        apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present

      - name: Update apt-cache
        apt: update_cache=yes

      - name: Install Postgresql client
        apt: pkg=postgresql-client-{{postgresql_version}} state=present

      - name: Install Postgresql server
        apt: pkg={{item}} state=installed
        with_items:
          - python-psycopg2
          - postgresql-{{postgresql_version}}
          - postgresql-contrib-{{postgresql_version}}
          - libpq-dev

      - name: Add Postgres user
        become: yes
        become_user: postgres
        postgresql_user: name={{localuser}} role_attr_flags=SUPERUSER state=present

      - name: Install Postgis
        apt: pkg="{{item}}" state=installed force=yes
        with_items:
          - postgis
          - postgresql-{{postgresql_version}}-postgis-{{postgis_version}}

      - name: add Brightbox PPA
        apt_repository: repo=ppa:brightbox/ruby-ng state=present update_cache=yes

      - name: Install Ruby
        apt: pkg={{item}} state=installed
        with_items:
          - ruby{{ruby_version}}
          - ruby{{ruby_version}}-dev

      - name: Copy gemrc
        copy: src=./files/gemrc dest=/etc/gemrc backup=yes owner=root group=root mode=0644

      - name: Update to latest Rubygems
        command: "gem update --system"
        environment:
          DEBIAN_DISABLE_RUBYGEMS_INTEGRATION: "true"

      - name: Remove Bundler apt package
        apt: pkg=bundle state=absent

      - name: Install Bundler via Rubygems
        gem: name=bundler
        become: yes
        become_user: "{{localuser}}"
        environment:
          GEM_HOME: "~/.gem"

      - name: Add Heroku apt source
        apt_repository: repo="deb http://toolbelt.heroku.com/ubuntu ./" state=present update_cache=yes

      - name: Add Heroku repository key
        apt_key: url="https://toolbelt.heroku.com/apt/release.key" state=present

      - name: Install Heroku toolbelt
        apt: pkg=heroku-toolbelt state=present force=yes

      - name: Remove annoying MOTD messages
        file: path=/etc/update-motd.d/{{item}} state=absent
        with_items:
          - 98-cloudguest
          - 51-cloudguest
          - 10-help-text

      - name: Add Estately Postgres user
        become: yes
        become_user: postgres
        postgresql_user: name=shackserv password=password role_attr_flags=SUPERUSER state=present

      - name: "Add staging server to /etc/hosts"
        lineinfile: dest="/etc/hosts" regexp="estately\.staging" state="present" line="52.24.118.178 www.estately.staging estately.staging assets0.estately.staging assets2.estately.staging assets3.estately.staging"

      - name: "Set up est"
        lineinfile: dest="/home/{{localuser}}/.bash_profile" line='eval "$(/home/{{localuser}}/work/estately/est/bin/est init -)"'

      - name: "Configure Postgres"
        lineinfile: dest="/etc/postgresql/9.4/main/postgresql.conf" line="{{item}}"
        notify: restart postgresql
        with_items:
          - 'checkpoint_completion_target = 0.7'
          - 'checkpoint_segments          = 32'
          - 'checkpoint_segments          = 64'
          - 'default_statistics_target    = 100'
          - 'effective_cache_size         = 1536MB'
          - 'fsync                        = off'
          - 'full_page_writes             = off'
          - 'maintenance_work_mem         = 128MB'
          - 'max_connections              = 10'
          - 'shared_buffers               = 512MB'
          - 'synchronous_commit           = off'
          - 'wal_buffers                  = 16MB'
          - 'wal_writer_delay             = 1s'
          - 'work_mem                     = 52428kB'

      - name: "Add some known hosts"
        shell: ssh-keyscan github.com george.estately.com appserver1.priv.estately.com appserver2.priv.estately.com appserver3.priv.estately.com worker1.estately.com worker2.priv.estately.com worker4.priv.estately.com worker5.priv.estately.com > /home/{{localuser}}/.ssh/known_hosts chdir=/home/{{localuser}}/.ssh/ creates="known_hosts"
          
      - name: "Set known hosts file ownership"
        file: path=/home/{{localuser}}/.ssh/known_hosts owner={{localuser}} group={{localgroup}} mode=0600

      - name: "Add cert for openvpn"
        copy: src={{item}} dest=/etc/ssl/certs/estately.crt group=root owner=root mode=0400
        with_fileglob:
          - 'vpn/[!ca]*.crt'

      - name: "Add key for openvpn"
        copy: src={{item}} dest=/etc/ssl/private/estately.key group=root owner=root mode=0400
        with_fileglob:
          - vpn/*.key

      - name: "Add CA for openvpn"
        copy: src=vpn/ca.crt dest=/etc/ssl/certs/estately-ca.crt group=root owner=root mode=0400

      - name: "Add config for openvpn"
        notify:
          - reload systemd
          - restart openvpn
        copy:
          dest: /etc/openvpn/estately.conf
          group: root
          owner: root
          mode: 0400
          content: |
            client
            dev tun
            proto udp
            remote vpn.estately.com 1194
            resolv-retry infinite
            nobind
            persist-key
            persist-tun
            ca /etc/ssl/certs/estately-ca.crt
            cert /etc/ssl/certs/estately.crt
            key /etc/ssl/private/estately.key
            comp-lzo
            verb 3
            log /var/log/openvpn.log

      - meta: flush_handlers

      - name: "Add some known hosts"
        shell: ssh-keyscan github.com george.estately.com appserver1.priv.estately.com appserver2.priv.estately.com appserver3.priv.estately.com worker1.estately.com worker2.priv.estately.com worker4.priv.estately.com worker5.priv.estately.com > /home/{{localuser}}/.ssh/known_hosts chdir=/home/{{localuser}}/.ssh/ creates="known_hosts"

      - name: "Set known hosts file ownership"
        file: path=/home/{{localuser}}/.ssh/known_hosts owner={{localuser}} group={{localgroup}} mode=0600

      - stat: path=/home/{{localuser}}/.tmux.conf
        register: tmux_conf

      - name: "Set up symlink for SSH_AUTH_SOCK"
        when: tmux_conf.stat.exists == True
        copy:
          dest: /home/{{localuser}}/.ssh/rc
          owner: "{{localuser}}"
          group: "{{localgroup}}"
          mode: 0700
          content: |
            #!/bin/bash

            # Fix SSH auth socket location so agent forwarding always works 
            # with tmux even after a session reattach.
            if test "$SSH_AUTH_SOCK" ; then
              ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
            fi

      - name: Fix tmux SSH reattach issue
        lineinfile: dest="/home/{{localuser}}/.tmux.conf" line="{{item}}"
        when: tmux_conf.stat.exists == True
        with_items:
          - "setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock"
          - "set -g update-environment -r"
