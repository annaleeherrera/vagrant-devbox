---
  -
    hosts: all
    sudo: True

    vars:
      ruby_version: "2.3"
      postgresql_version: "9.4"
      postgis_version: "2.3"
      hostname: "dev"
      localuser: "ubuntu"
      localgroup: "users"
      localshell: "/bin/bash"

    handlers:
      - name: sync time
        command: /etc/cron.hourly/ntpdate

    tasks:
      - name: Remove unused packages
        apt: pkg={{item}} state=absent
        with_items:
          - puppet
          - chef

      - name: Update hostname
        hostname: name={{hostname}}

      - name: Create local user and group
        user: name={{localuser}} group={{localgroup}} groups="users,sudo" shell={{localshell}} state="present"

      - name: Update apt-cache if it is staler than 60 minutes
        apt: update_cache=yes cache_valid_time=3600

      - name: Add cron job to sync time
        copy: src=./files/ntpdate dest=/etc/cron.hourly/ntpdate mode=0755 owner=root group=root
        notify: sync time
        
      - name: Install Aptitude
        apt: pkg=aptitude state=installed

      - name: Update stale packages
        apt: upgrade=yes

      - name: Install base packages
        apt: pkg={{item}} state=installed
        with_items:
          - ntp
          - build-essential
          - git-core
          - vim
          - vim-nox
          - direnv
          - tmux
          - tmate
          - lua5.2
          # - elixir
          - redis-server
          - redis-tools
          - memcached
          - phantomjs
          - zip
          - unzip
          - htop
          - openvpn
          - ack-grep
          - libcurl4-openssl-dev
          - imagemagick
          - libsqlite3-dev

      - name: Make Vim the system editor
        alternatives: name=editor path=/usr/bin/vim link=/usr/bin/editor

      - name: Add Nodesource repository key
        apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present

      - name: Add Nodesource apt source
        apt_repository: repo="deb https://deb.nodesource.com/node_0.10 {{ansible_lsb.codename}} main" state=present update_cache=yes

      - name: Install Node
        apt: pkg={{item}} state=latest
        with_items:
          - nodejs
          - autoconf
          - libtool

      - name: Add Postgres repository
        apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ansible_lsb.codename}}-pgdg main' state=present

      - name: Add Postgres repository key
        apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present

      - name: Update apt-cache
        apt: update_cache=yes

      - name: Install Postgresql client
        apt: pkg=postgresql-client-{{postgresql_version}} state=present

      - name: Install Postgresql server
        apt: pkg={{item}} state=installed
        with_items:
          - python-psycopg2
          - postgresql-{{postgresql_version}}
          - postgresql-contrib-{{postgresql_version}}
          - libpq-dev

      - name: Add Postgres user
        sudo: yes
        sudo_user: postgres
        postgresql_user: name={{localuser}} role_attr_flags=SUPERUSER state=present

      - name: Install Postgis
        apt: pkg="{{item}}" state=installed force=yes
        with_items:
          - postgis
          - postgresql-{{postgresql_version}}-postgis-{{postgis_version}}

      # - name: Check whether Postgis is already held
      #   command: apt-mark showhold postgis
      #   register: postgis_is_held
      #   ignore_errors: True
      #
      # - name: Hold Postgis packages to set version
      #   command: apt-mark hold {{item}}
      #   when: postgis_is_held|failed
      #   with_items:
      #     - postgis
      #     - postgresql-{{postgresql_version}}-postgis-{{postgis_version}}
      #     - postgresql-{{postgresql_version}}-postgis-scripts

      # - name: Remove Ruby 2.0
      #   apt: pkg={{item}} state=absent purge=yes
      #   when: ruby_version != '2.0'
      #   with_items:
      #     - ruby2.0
      #     - ruby2.0-dev
      #
      # - name: Remove Ruby 2.1
      #   apt: pkg={{item}} state=absent purge=yes
      #   when: ruby_version != '2.1'
      #   with_items:
      #     - ruby2.1
      #     - ruby2.1-dev
      #
      # - name: Remove Ruby 2.2
      #   apt: pkg={{item}} state=absent purge=yes
      #   when: ruby_version != '2.2'
      #   with_items:
      #     - ruby2.2
      #     - ruby2.2-dev

      - name: add Brightbox PPA
        apt_repository: repo=ppa:brightbox/ruby-ng state=present update_cache=yes

      - name: Install Ruby
        apt: pkg={{item}} state=installed
        with_items:
          - ruby{{ruby_version}}
          - ruby{{ruby_version}}-dev

      - name: Copy gemrc
        copy: src=./files/gemrc dest=/etc/gemrc backup=yes owner=root group=root mode=0644

      - name: Remove Bundler apt package
        apt: pkg={{item}} state=absent
        with_items:
          - bundler

      - name: Add Heroku apt source
        apt_repository: repo="deb http://toolbelt.heroku.com/ubuntu ./" state=present update_cache=yes

      - name: Add Heroku repository key
        apt_key: url="https://toolbelt.heroku.com/apt/release.key" state=present

      - name: Install Heroku toolbelt
        apt: pkg=heroku-toolbelt state=present force=yes

      - name: Copy bash profile
        copy: src=./files/bash_profile dest=/home/{{localuser}}/.bash_profile backup=yes mode=0644 owner={{localuser}} group={{localgroup}}

      - name: Remove annoying MOTD messages
        file: path=/etc/update-motd.d/{{item}} state=absent
        with_items:
          - 98-cloudguest
          - 51-cloudguest
          - 10-help-text
